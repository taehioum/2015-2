#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
# 2012-11114 TAEHWOI OUM.
#
# Describe how and why you modified the baseline code.
# 0. change structure of the loop according to assembly code resulting from 
#   GCC -O3. Using iterator i, or memcpy is faster when copying an array but will have to stick with pointer arithmetic because that's what Y86 have.
#   http://nadeausoftware.com/articles/2012/05/c_c_tip_how_copy_memory_quickly
#
# 1. Add IIADDL, and LEAVE instruction in the pipeline to merge 2 instructions to one.
#
# 2. Since looping by 1 is expensive (increasing/decreasing pointers/length per iteration, doing boundary check per iteration...) copy N elements at once.
#
# 3. copying N elements at the same time can lead to uncopied elements if len % N != 0.
#   So, decided to use 2 for N, and check for odd/even at the start of the function.
# 4. If length even, jump directly in to the loop that copies two elements at once.
#
# 5. When length is odd, decrement length, check CC,and jump to ONE, or
# will copy one element, and jump in to loop so that loop only has to check boundary once every two copies.  According to the benchmark, small cases(especially when len is 1) shows high CPE. So, when the length is 1, instead of copying one element and jumping in to loop, jump to ONE, where you won't have to handle length.
#
# 6. At first, used cmove to add 1 to count. However, using cmove requires push/popping one more register to stack since Y86 cmove only allows reg to reg, and to reset target register after you add. According to the benchmark using jumps and iiaddls are faster than cmoves and iraddls.
#
# 7. Tried increasing N to 4 or 8 and, jump to the corresponding loop, but failed to create a jump table. Also tried to handle cases where len%N == 1 ~ N-1.
# However, since pipe-full.hcl uses branch always taken strategy, too many case handling at the beginning of the function actually worsened performance. So, decided to copy 8 elements at once, and but still check boundary every two copies. (8 showed best performance, out of 2 4 8 16 32).
# 
# 8. Since pipeline assumes branch taken, jump to the next loop before jumping to Done, # because jumping to Done will only happen once per array.
#
#--This resulted in CPE of 10.56, and after many trial and errors, decided that this was
# the best I could achieve by modifying Ncopy.
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:  
  pushl %ebp    # Save old frame pointer
  rrmovl %esp,%ebp  # Set up new frame pointer
  pushl %esi    # Save callee-save regs
  pushl %ebx
  pushl %edi
  mrmovl 8(%ebp),%ebx # src
  mrmovl 12(%ebp),%ecx  # dst
  mrmovl 16(%ebp),%edx  # len

##################################################################
# You can modify this portion
# small cases -> hard coding??
# Loop header
  irmovl $1, %edi #useful helper reg
  xorl %eax, %eax #cnt = 0
  andl %edx, %edx   # len <= 0?
  jle Done    # if so, goto Done:
  andl %edx, %edi   # len even? /*doesn't modify length -> no need to restore */
  je Loop0 #is even (%ebp == 0)

  iaddl $-1,%edx # len==1? /* don't have to restore length */
  je ONE # corner case
  #odd length & more than 1
  mrmovl (%ebx), %esi #%esi = tmp
  rmmovl %esi, (%ecx)
  iaddl $4, %ebx
  iaddl $4, %ecx
  andl %esi, %esi #tmp <= 0?
  jle Loop0 #tmp <= 0
  iaddl $1, %eax #tmp > 0

Loop0: #sub by 2
  mrmovl (%ebx), %esi #tmp
  rmmovl %esi, (%ecx)
  andl %esi, %esi # esi > 0?
  jle Loop0half
  iaddl $1, %eax

Loop0half:
  mrmovl 4(%ebx), %esi #tmp
  rmmovl %esi, 4(%ecx)
  andl %esi, %esi
  jle Loop0check
  iaddl $1, %eax
Loop0check:
  iaddl $-2, %edx #len-=2
  jg Loop1 #len >=2 more likely to continue
  je Done #len ==0

Loop1:
  mrmovl 8(%ebx), %esi #tmp
  rmmovl %esi, 8(%ecx)
  andl %esi, %esi
  jle Loop1half
  iaddl $1, %eax
Loop1half:
  mrmovl 12(%ebx), %esi #tmp
  rmmovl %esi, 12(%ecx)
  andl %esi, %esi
  jle Loop1check
  iaddl $1, %eax
Loop1check:
  iaddl $-2, %edx #len-=2
  jg Loop2 #len >=2 
  je Done #len ==0

Loop2:
  mrmovl 16(%ebx), %esi #tmp
  rmmovl %esi, 16(%ecx)
  andl %esi, %esi
  jle Loop2half
  iaddl $1, %eax
Loop2half:
  mrmovl 20(%ebx), %esi #tmp
  rmmovl %esi, 20(%ecx)
  andl %esi, %esi
  jle Loop2check
  iaddl $1, %eax
Loop2check:
  iaddl $-2, %edx #len-=2
  jg Loop3 #len >=2
  je Done #len ==0

Loop3:
  mrmovl 24(%ebx), %esi #tmp
  rmmovl %esi, 24(%ecx)
  andl %esi, %esi
  jle Loop3half
  iaddl $1, %eax
Loop3half:
  mrmovl 28(%ebx), %esi #tmp
  rmmovl %esi, 28(%ecx)
  andl %esi, %esi
  jle Loop3check
  iaddl $1, %eax


Loop3check:
  iaddl $32, %ebx
  iaddl $32, %ecx
  iaddl $-2, %edx #len-=2

  jg Loop0 #len > 2
  je Done #len ==0

ONE: #no need to handle length
  mrmovl (%ebx), %esi #%esi = tmp
  rmmovl %esi, (%ecx)
  andl %esi, %esi #esi <= 0?
  jle Done
  iaddl $1, %eax
##################################################################
# Do not modify the following section of code
# Function epilogue.
  Done:
  popl %edi               # Restore callee-save registers
  popl %ebx
  popl %esi
  leave
  ret
##################################################################
# Keep the following label at the end of your function
  End:
#/* $end ncopy-ys */
