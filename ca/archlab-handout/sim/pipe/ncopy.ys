#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
# 2012-11114 TAEHWOI OUM.
#
# Describe how and why you modified the baseline code.
# 0. pushl %ebp once again to utilize 1 more registers
# 1. since looping is expensive, move 8 elements at once.
# 1. since looping is expensive, move 8 elements at once.
# --2. use cmove to add cnt.--
# 2. apparently, using cmove is expensive due to resetting inc to 0 everytime
#   just use jump-ifs -> no need to pushl %ebp??
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	
  pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 12(%ebp),%ecx	# dst
	mrmovl 16(%ebp),%edx	# len

##################################################################
# You can modify this portion
# small cases -> hard coding??
# 1 elements
# Loop header
  irmovl $1, %edi #useful helper reg
  xorl %eax, %eax #cnt = 0
  #xorl %edi, %edi #inc = 0
  andl %edx, %edx		# len <= 0?
  jle Done		# if so, goto Done:
  andl %edx, %edi		# len even?
  #irmovl $1, %ebp #restore ebp
  je Loop0 #is even (%ebp == 0)

  iaddl $-1,%edx
  je One
  #odd length & more than 1
  mrmovl (%ebx), %esi #%esi = tmp
  rmmovl %esi, (%ecx)
  iaddl $4, %ebx
  iaddl $4, %ecx

  andl %esi, %esi #esi <= 0?
  jle Loop0
  iaddl $1, %eax
  #cmovg %ebp, %edi # inc = 1
  #addl %edi, %eax
  #xorl %edi, %edi #inc = 0

Loop0: #sub by 2
  mrmovl (%ebx), %esi #tmp
  rmmovl %esi, (%ecx)
  andl %esi, %esi # esi > 0?
  jle Loop0half
  iaddl $1, %eax
  #cmovg %ebp, %edi # inc = 1
  #addl %edi, %eax
  #xorl %edi, %edi #inc = 0

Loop0half:
  mrmovl 4(%ebx), %esi #tmp
  rmmovl %esi, 4(%ecx)
  andl %esi, %esi
  #cmovg %ebp, %edi # inc = 1
  #addl %edi, %eax
  #xorl %edi, %edi #inc = 0
  jle Loop0check
  iaddl $1, %eax
Loop0check:
  iaddl $-2, %edx #len-=2
  jg Loop1 #edx >=2
  je Done #edx ==0

Loop1:
  mrmovl 8(%ebx), %esi #tmp
  rmmovl %esi, 8(%ecx)
  andl %esi, %esi
  jle Loop1half
  iaddl $1, %eax
  #cmovg %ebp, %edi # inc = 1
  #addl %edi, %eax
  #xorl %edi, %edi #inc = 0
Loop1half:
  mrmovl 12(%ebx), %esi #tmp
  rmmovl %esi, 12(%ecx)
  andl %esi, %esi
  jle Loop1check
  iaddl $1, %eax
  #cmovg %ebp, %edi # inc = 1
  #addl %edi, %eax
  #xorl %edi, %edi #inc = 0
Loop1check:
  iaddl $-2, %edx #len-=2
  jg Loop2 #edx >=2
  je Done #edx ==0

Loop2:
  mrmovl 16(%ebx), %esi #tmp
  rmmovl %esi, 16(%ecx)
  andl %esi, %esi
  jle Loop2half
  iaddl $1, %eax
  #cmovg %ebp, %edi # inc = 1
  #addl %edi, %eax
  #xorl %edi, %edi #inc = 0
Loop2half:
  mrmovl 20(%ebx), %esi #tmp
  rmmovl %esi, 20(%ecx)
  andl %esi, %esi
  #cmovg %ebp, %edi # inc = 1
  #addl %edi, %eax
  #xorl %edi, %edi #inc = 0
  jle Loop2check
  iaddl $1, %eax
Loop2check:
  iaddl $-2, %edx #len-=2
  jg Loop3 #edx >=2
  je Done #edx ==0

Loop3:
  mrmovl 24(%ebx), %esi #tmp
  rmmovl %esi, 24(%ecx)
  andl %esi, %esi
  jle Loop3half
  iaddl $1, %eax
  #cmovg %ebp, %edi # inc = 1
  #addl %edi, %eax
  #xorl %edi, %edi #inc = 0
Loop3half:
  mrmovl 28(%ebx), %esi #tmp
  rmmovl %esi, 28(%ecx)
  andl %esi, %esi
  jle Loop3check
  iaddl $1, %eax
  #cmovg %ebp, %edi # inc = 1
  #addl %edi, %eax
  #xorl %edi, %edi #inc = 0


Loop3check:
  iaddl $32, %ebx
  iaddl $32, %ecx
  iaddl $-2, %edx #len-=2

  jg Loop0 #edx > 2
  je Done #edx ==0

One: #no need to handle length
  mrmovl (%ebx), %esi #%esi = tmp
  rmmovl %esi, (%ecx)
  andl %esi, %esi #esi <= 0?
  jle Done
  iaddl $1, %eax
##################################################################
# Do not modify the following section of code
# Function epilogue.
  Done:
  popl %edi               # Restore callee-save registers
  popl %ebx
  popl %esi
  leave
  ret
##################################################################
# Keep the following label at the end of your function
  End:
#/* $end ncopy-ys */
